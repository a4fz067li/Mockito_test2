// STEP1.  MOCK
Calculate cal = mock(Calculate.class);
Assert.assertEquals(0, cal.add(0, 1));  


// STEP2.  stub
Calculate cal = mock(Calculate.class);
when(cal.add(0, 1)).thenReturn(1);
Assert.assertEquals(1, cal.add(0, 1));


// STEP3.  SPY
Calculate cal = spy(Calculate.class);
Assert.assertEquals(3, cal.add(1, 2));
when(cal.add(1, 2)).thenReturn(0);
Assert.assertEquals(0, cal.add(1, 2));

// STEP4. Verify
Calculate cal = spy(Calculate.class);
Assert.assertEquals(3, cal.add(1, 2));
when(cal.add(1, 2)).thenReturn(0);
Assert.assertEquals(0, cal.add(1, 2));
verify(cal).add(1, 2); 


////////////////


List<String> list = new LinkedList<String>();  
List<String> spy = spy(list);  

    when(spy.size()).thenReturn(100);  
      
    spy.add("one");  
    spy.add("two");  
      
    assertEquals(spy.get(0), "one");  
    assertEquals(100, spy.size());  
    
    /*  
        spy的原理是，如果不做STUB方法則默認會執行真實的方法，若有，則返回STUB預定值。
        可以看出spy.size()通過STUB實現方法，返回了值100，而spy.get(0)則返回實際值。
    */
    
    
    
// Case1
    @Test  
    public void spyTest() {  
        Jack spyJack = spy(new Jack());  
        when(spyJack.say()).thenReturn(false);  
      
        assertFalse(spyJack.go());  
    }  
      
    class Jack {  
        public boolean say() {  
            System.out.println("I say go go go!!");  // 注意!!
            return true;  
        }  
    }  
    
    
    
    @Test  
    public void callRealMethodTest() {  
        Jerry jerry = mock(Jerry.class);  
      
        doCallRealMethod().when(jerry).goHome();  
        doCallRealMethod().when(jerry).doSomeThingB();  
      
        jerry.goHome();  
      
        verify(jerry).doSomeThingA();  
        verify(jerry).doSomeThingB();  
    }  
      
    class Jerry {  
        public void goHome() {  
            doSomeThingA();  
            doSomeThingB();  
        }  
      
        // real invoke it.  
        public void doSomeThingB() {  
            System.out.println("good day");  
      
        }  
      
        // auto mock method by mockito  
        public void doSomeThingA() {  
            System.out.println("you should not see this message.");  
      
        }  
    }  




/////////////////////////


final List<String> list = mock(List.class); //list中包含的是字串

when(list.get(0)).thenReturn("33");     //1.先指定物件，再來是method,最後是回傳值，較符合直覺。
                                        //2.當回傳值不是字串的33時，IDE就會出現紅線提示錯誤了(type-safety)。
doReturn(33).when(list).get(0);         //這裡回傳值為數字的33，但IDE卻沒出現錯誤；表示此API沒進行type-safety的檢查。


//

final List list = spy(new LinkedList());
 
when(spy.get(0)).thenReturn("foo");    //這一行會產生IndexOutOfBoundsException，因為list是空的但卻去拿資料  
doReturn("foo").when(spy).get(0);    //這行就能正常執行，因為doReturn不會真的去呼叫stubbing method

//

final List list = mock(List.class);
when(list.get(0)).thenThrow(new RuntimeException());
when(list.get(0)).thenReturn("bar");  //無法覆寫，這裡會丟出RuntimeException
 
doReturn("bar").when(list).get(0);    //用doReturn才有辦法覆寫
